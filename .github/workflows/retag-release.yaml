# This workflow rebuilds Docker image for existing Git tag without changing tag position
# It deletes the existing Docker image and rebuilds it with the same Git tag position
name: Rebuild Docker Image

on:
  # Manual workflow dispatch with input parameters
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to rebuild Docker image (e.g., v0.4.0)'
        required: true
        type: string
      confirm_rebuild:
        description: 'Confirm Docker image rebuild (type "REBUILD" to confirm)'
        required: true
        type: string

env:
  DOCKER_REGISTRY_NAME: cloudbaristaorg
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  rebuild-docker-image:
    name: Rebuild Docker Image
    runs-on: ubuntu-22.04
    
    # Only allow if confirmation is provided
    if: github.event.inputs.confirm_rebuild == 'REBUILD'
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper tagging
          ref: ${{ github.event.inputs.tag_name }}  # Checkout specific tag

      - name: Validate tag format
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          if [[ ! $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag name must follow semver format (e.g., v0.4.0)"
            exit 1
          fi
          echo "Validating tag: $TAG_NAME"


      - name: Generate Docker tags
        id: meta
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          # Remove 'v' prefix from tag name
          DOCKER_TAG=${TAG_NAME#v}
          echo "Git tag: $TAG_NAME"
          echo "Docker tag: $DOCKER_TAG"
          echo "tags=${{env.DOCKER_REGISTRY_NAME}}/${{env.IMAGE_NAME}}:$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "labels=" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and publish rebuilt image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          target: prod
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Verify rebuilt image
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          echo "Verifying rebuilt Docker image for tag: $TAG_NAME"
          
          # Wait a bit for Docker Hub to process
          sleep 10
          
          # Check if image exists
          curl -s "https://hub.docker.com/v2/repositories/${{ env.DOCKER_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}/tags/$TAG_NAME/" | jq '.name'
          
          echo "Docker image for tag $TAG_NAME successfully rebuilt with digest: ${{ steps.docker_build.outputs.digest }}"

      - name: Summary
        run: |
          echo "## Docker Image Rebuild Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.event.inputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Digest**: ${{ steps.docker_build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Tag Position**: Unchanged (same commit)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: âœ… Successfully rebuilt Docker image" >> $GITHUB_STEP_SUMMARY
