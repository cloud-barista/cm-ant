# This workflow moves a Git tag to current HEAD commit and rebuilds Docker image
# WARNING: This changes the Git tag position and may break existing references
name: Move Tag to Latest Commit

on:
  # Manual workflow dispatch with input parameters
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to move to latest commit (e.g., v0.4.0)'
        required: true
        type: string
      delete_existing_docker_image:
        description: 'Delete existing Docker Hub image before rebuilding?'
        required: true
        type: choice
        default: 'yes'
        options:
          - 'yes'
          - 'no'
      confirm_move:
        description: '⚠️ WARNING: This will move the Git tag to current HEAD and rebuild Docker image. Type "MOVE_TAG" to confirm'
        required: true
        type: string

env:
  DOCKER_REGISTRY_NAME: cloudbaristaorg
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  move-tag-to-latest:
    name: Move Tag to Latest Commit
    runs-on: ubuntu-22.04
    
    # Only allow if confirmation is provided
    if: github.event.inputs.confirm_move == 'MOVE_TAG'
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate tag format
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          if [[ ! $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag name must follow semver format (e.g., v0.4.0)"
            exit 1
          fi
          echo "Validating tag: $TAG_NAME"

      - name: Delete existing Git tag
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          echo "Deleting existing Git tag: $TAG_NAME"
          
          # Delete local tag if exists
          git tag -d $TAG_NAME 2>/dev/null || echo "Local tag $TAG_NAME not found"
          
          # Delete remote tag if exists
          git push origin :refs/tags/$TAG_NAME 2>/dev/null || echo "Remote tag $TAG_NAME not found"
          
          echo "Git tag $TAG_NAME deleted"

      - name: Delete existing Docker Hub tag (conditional)
        if: github.event.inputs.delete_existing_docker_image == 'yes'
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          echo "Deleting existing Docker Hub tag: $TAG_NAME"
          
          # Delete the tag from Docker Hub
          # Try with Personal Access Token first, fallback to password
          if [ -n "${{ secrets.DOCKER_PAT }}" ]; then
            echo "Using Personal Access Token for deletion"
            curl -X DELETE \
              -H "Authorization: Bearer ${{ secrets.DOCKER_PAT }}" \
              "https://hub.docker.com/v2/repositories/${{ env.DOCKER_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}/tags/$TAG_NAME/" \
              -H "Accept: application/json" 2>/dev/null || echo "Docker Hub tag $TAG_NAME not found"
          else
            echo "Using username/password for deletion"
            curl -X DELETE \
              -u ${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }} \
              "https://hub.docker.com/v2/repositories/${{ env.DOCKER_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}/tags/$TAG_NAME/" \
              -H "Accept: application/json" 2>/dev/null || echo "Docker Hub tag $TAG_NAME not found"
          fi
          
          echo "Docker Hub tag $TAG_NAME deleted"

      - name: Skip Docker Hub deletion
        if: github.event.inputs.delete_existing_docker_image == 'no'
        run: |
          echo "Skipping Docker Hub image deletion as requested by user"
          echo "⚠️ Note: This may result in multiple digests for the same tag"

      - name: Wait for cleanup (conditional)
        if: github.event.inputs.delete_existing_docker_image == 'yes'
        run: |
          echo "Waiting 30 seconds for cleanup to complete..."
          sleep 30

      - name: Create new Git tag at current HEAD
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          echo "Creating new Git tag: $TAG_NAME at HEAD (${{ github.sha }})"
          
          # Create new tag at current HEAD
          git tag $TAG_NAME
          
          # Push new tag to remote
          git push origin $TAG_NAME
          
          echo "New Git tag $TAG_NAME created at HEAD"

      - name: Extract metadata for new tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{env.DOCKER_REGISTRY_NAME}}/${{env.IMAGE_NAME}}
          tags: |
            type=semver,enable=true,pattern={{version}}
          flavor: |
            latest=false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Clear Docker cache (force fresh build)
        run: |
          docker buildx prune -f
          rm -rf /tmp/.buildx-cache || true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and publish (force rebuild)
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          target: prod
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          # Force rebuild by not using cache
          no-cache: true

      - name: Verify rebuild
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          echo "Verifying rebuilt tag: $TAG_NAME"
          
          # Wait for Docker Hub to process
          sleep 10
          
          # Get tag info
          TAG_INFO=$(curl -s "https://hub.docker.com/v2/repositories/${{ env.DOCKER_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}/tags/$TAG_NAME/")
          echo "Tag info: $TAG_INFO"
          
          echo "Tag $TAG_NAME successfully rebuilt with digest: ${{ steps.docker_build.outputs.digest }}"

      - name: Summary
        run: |
          echo "## Move Tag to Latest Commit Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.event.inputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Digest**: ${{ steps.docker_build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image Deletion**: ${{ github.event.inputs.delete_existing_docker_image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Successfully moved tag to latest commit" >> $GITHUB_STEP_SUMMARY
          echo "- **⚠️ Warning**: Git tag position has been changed!" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.delete_existing_docker_image }}" = "no" ]; then
            echo "- **⚠️ Note**: Multiple digests may exist for the same tag" >> $GITHUB_STEP_SUMMARY
          fi
